==============================
How to use 2-matrix_divided.py
==============================

Usage
=====

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

note: it is rounded to two decimal places
the original matrix is left unchanged

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

matrix can contains integer and floating point numbers

::
    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]

    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]    

Invalid Matrices
================

``matrix_divided(..)`` can contains list of list of integer and floats only
it will return TypeError

::

    >>> matrix = [['1', 2, 3], [4, 's', 6]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


the rows of matrix must be the same size

::

    >>> matrix = [[1, 2, 3], [1, 2, 3, 4, 5]]
    >>> print(matrix_divided(matrix, 3))
    Traceback: (most recent call last)
    TypeError: Each row of the matrix must have the same size


Invalid Divisors
================

the div must be a number
and the value must not equl to 0

::

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, "M"))
Traceback: (most recent call last)
TypeError: div must be a number


div must not equal to 0

::

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 0))
Traceback: (most recent call last)
ZeroDivisionError: division by zero
